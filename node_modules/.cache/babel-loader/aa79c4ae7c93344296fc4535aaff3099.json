{"ast":null,"code":"import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport * as fromUserReducer from './commons/containers/loginPage/reducer';\nimport createSagaMiddleware from 'redux-saga';\nimport { all, fork } from 'redux-saga/effects';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { routerMiddleware, connectRouter } from 'connected-react-router';\nimport { createBrowserHistory } from 'history';\nimport UserSaga from './commons/containers/loginPage/saga';\nexport const createRootReducer = history => combineReducers({\n  user: fromUserReducer.UserReducer,\n  router: connectRouter(history)\n}); // export const reducer = combineReducers<State>({\n//     user: fromUserReducer.UserReducer,\n//     router: connectRouter(history)\n// })\n\nexport function* rootSaga() {\n  yield all([fork(UserSaga)]);\n}\nexport function configureStore(history, initialState) {\n  // create the composing function for our middlewares\n  const composeEnhancers = composeWithDevTools({}); // create the redux-saga middleware\n\n  const sagaMiddleware = createSagaMiddleware(); // We'll create our store with the combined reducers/sagas, and the initial Redux state that\n  // we'll be passing from our entry point.\n\n  const store = createStore(createRootReducer(history), initialState, composeEnhancers(applyMiddleware(routerMiddleware(history), sagaMiddleware))); // Don't forget to run the root saga, and return the store object.\n\n  sagaMiddleware.run(rootSaga);\n  return store;\n}\nconst initialState = window.INITIAL_REDUX_STATE;\nexport const history = createBrowserHistory();\nconst store = configureStore(history, initialState);\nexport default store;","map":{"version":3,"sources":["C:\\Users\\k_bel\\Documents\\WorkSpace\\react-redux-saga-ts\\src\\store.ts"],"names":["createStore","combineReducers","applyMiddleware","fromUserReducer","createSagaMiddleware","all","fork","composeWithDevTools","routerMiddleware","connectRouter","createBrowserHistory","UserSaga","createRootReducer","history","user","UserReducer","router","rootSaga","configureStore","initialState","composeEnhancers","sagaMiddleware","store","run","window","INITIAL_REDUX_STATE"],"mappings":"AAAA,SAAQA,WAAR,EAAqBC,eAArB,EAA6CC,eAA7C,QAAmE,OAAnE;AACA,OAAO,KAAMC,eAAb,MAAkC,wCAAlC;AACA,OAAOC,oBAAP,MAAkC,YAAlC;AACA,SAAQC,GAAR,EAAaC,IAAb,QAAyB,oBAAzB;AACA,SAAQC,mBAAR,QAAkC,0BAAlC;AACA,SAASC,gBAAT,EAA2BC,aAA3B,QAA6D,wBAA7D;AACA,SAAmBC,oBAAnB,QAA8C,SAA9C;AACA,OAAOC,QAAP,MAAqB,qCAArB;AASA,OAAO,MAAMC,iBAAiB,GAAIC,OAAD,IAC/BZ,eAAe,CAAmB;AAChCa,EAAAA,IAAI,EAAEX,eAAe,CAACY,WADU;AAEhCC,EAAAA,MAAM,EAAEP,aAAa,CAACI,OAAD;AAFW,CAAnB,CADV,C,CAKP;AACA;AACA;AACA;;AAGA,OAAO,UAAUI,QAAV,GAAqB;AACxB,QAAMZ,GAAG,CAAC,CAACC,IAAI,CAACK,QAAD,CAAL,CAAD,CAAT;AACD;AAEH,OAAQ,SAASO,cAAT,CAAwBL,OAAxB,EAA0CM,YAA1C,EAAmG;AACvG;AACA,QAAMC,gBAAgB,GAAGb,mBAAmB,CAAC,EAAD,CAA5C,CAFuG,CAGvG;;AACA,QAAMc,cAAc,GAAGjB,oBAAoB,EAA3C,CAJuG,CAMvG;AACA;;AACA,QAAMkB,KAAK,GAAGtB,WAAW,CACrBY,iBAAiB,CAACC,OAAD,CADI,EAEvBM,YAFuB,EAGvBC,gBAAgB,CAAClB,eAAe,CAACM,gBAAgB,CAACK,OAAD,CAAjB,EAA4BQ,cAA5B,CAAhB,CAHO,CAAzB,CARuG,CAcvG;;AACAA,EAAAA,cAAc,CAACE,GAAf,CAAmBN,QAAnB;AACA,SAAOK,KAAP;AACD;AAEH,MAAMH,YAAY,GAAGK,MAAM,CAACC,mBAA5B;AACA,OAAO,MAAMZ,OAAO,GAAGH,oBAAoB,EAApC;AAEP,MAAMY,KAAK,GAAGJ,cAAc,CAACL,OAAD,EAAUM,YAAV,CAA5B;AACA,eAAgBG,KAAhB","sourcesContent":["import {createStore, combineReducers, Store, applyMiddleware} from 'redux';\r\nimport *  as fromUserReducer from './commons/containers/loginPage/reducer';\r\nimport createSagaMiddleware  from 'redux-saga';\r\nimport {all, fork } from 'redux-saga/effects';\r\nimport {composeWithDevTools} from 'redux-devtools-extension';\r\nimport { routerMiddleware, connectRouter, RouterState } from 'connected-react-router';\r\nimport { History , createBrowserHistory} from 'history';\r\nimport UserSaga from './commons/containers/loginPage/saga';\r\n\r\nexport interface  ApplicationState{\r\n    user : fromUserReducer.State  ,\r\n    router: RouterState\r\n \r\n}\r\n\r\n\r\nexport const createRootReducer = (history: History) =>\r\n  combineReducers<ApplicationState>({\r\n    user: fromUserReducer.UserReducer,\r\n    router: connectRouter(history)\r\n  })\r\n// export const reducer = combineReducers<State>({\r\n//     user: fromUserReducer.UserReducer,\r\n//     router: connectRouter(history)\r\n// })\r\n\r\n\r\nexport function* rootSaga() {\r\n    yield all([fork(UserSaga)])\r\n  }\r\n\r\nexport  function configureStore(history: History, initialState: ApplicationState): Store<ApplicationState> {\r\n    // create the composing function for our middlewares\r\n    const composeEnhancers = composeWithDevTools({})\r\n    // create the redux-saga middleware\r\n    const sagaMiddleware = createSagaMiddleware()\r\n  \r\n    // We'll create our store with the combined reducers/sagas, and the initial Redux state that\r\n    // we'll be passing from our entry point.\r\n    const store = createStore(\r\n        createRootReducer(history),\r\n      initialState,\r\n      composeEnhancers(applyMiddleware(routerMiddleware(history), sagaMiddleware))\r\n    )\r\n  \r\n    // Don't forget to run the root saga, and return the store object.\r\n    sagaMiddleware.run(rootSaga)\r\n    return store\r\n  }\r\n\r\nconst initialState = window.INITIAL_REDUX_STATE;\r\nexport const history = createBrowserHistory();\r\n\r\nconst store = configureStore(history, initialState);\r\nexport  default store;\r\n"]},"metadata":{},"sourceType":"module"}